name: Deploy Module Federation Projects

on:
  push:
    branches: [main]
  workflow_dispatch: # ÂÖÅËÆ∏ÊâãÂä®Ëß¶Âèë

jobs:
  # Ê£ÄÊµãÂèòÂåñÁöÑÈ°πÁõÆ
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-projects: ${{ steps.detect.outputs.changed-projects }}
      project-configs: ${{ steps.detect.outputs.project-configs }}
      has-changes: ${{ steps.detect.outputs.has-changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Detect changed projects
        id: detect
        run: |
          # ËØªÂèñÈ°πÁõÆÈÖçÁΩÆ
          config=$(cat .github/project-config.json)
          all_projects=$(echo "$config" | jq -r '.projects[].name')

          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # ÊâãÂä®Ëß¶ÂèëÊó∂ÈÉ®ÁΩ≤ÊâÄÊúâÈ°πÁõÆ
            changed_projects=$(echo "$config" | jq -c '[.projects[].name]')
            project_configs=$(echo "$config" | jq -c '.projects')
            has_changes="true"
            echo "Manual trigger - deploying all projects: $changed_projects"
          else
            # Ê£ÄÊµãÂèòÂåñÁöÑÈ°πÁõÆ
            changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
            echo "Changed files: $changed_files"
            
            changed_projects="[]"
            project_configs="[]"
            has_changes="false"
            
            # ÈÅçÂéÜÊâÄÊúâÈ°πÁõÆÔºåÊ£ÄÊü•ÊòØÂê¶ÊúâÂèòÂåñ
            for project in $all_projects; do
              project_path=$(echo "$config" | jq -r ".projects[] | select(.name == \"$project\") | .path")
              if echo "$changed_files" | grep -q "^$project_path/"; then
                echo "Detected changes in $project ($project_path)"
                # Ê∑ªÂä†Âà∞ÂèòÂåñÁöÑÈ°πÁõÆÂàóË°®
                changed_projects=$(echo "$changed_projects" | jq --arg proj "$project" '. + [$proj]')
                # Ê∑ªÂä†È°πÁõÆÈÖçÁΩÆ
                project_config=$(echo "$config" | jq ".projects[] | select(.name == \"$project\")")
                project_configs=$(echo "$project_configs" | jq --argjson config "$project_config" '. + [$config]')
                has_changes="true"
              fi
            done
          fi

          echo "changed-projects=$changed_projects" >> $GITHUB_OUTPUT
          echo "project-configs=$project_configs" >> $GITHUB_OUTPUT
          echo "has-changes=$has_changes" >> $GITHUB_OUTPUT
          echo "Final changed projects: $changed_projects"
          echo "Final project configs: $project_configs"

  # ÊûÑÂª∫ÂíåÈÉ®ÁΩ≤
  deploy:
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project-config: ${{ fromJson(needs.detect-changes.outputs.project-configs) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.18.2'

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm --filter ${{ matrix.project-config.name }} build

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy ${{ matrix.project-config.path }}/dist --project-name ${{ matrix.project-config.cloudflare_project }}

      - name: Deployment summary
        run: |
          echo "üìç ${{ matrix.project-config.name }} deployed: ${{ matrix.project-config.url }}"
